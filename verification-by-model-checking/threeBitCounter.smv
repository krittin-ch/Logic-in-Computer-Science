-- Using boolean operation
MODULE main
VAR
    bit0 : counter_cell(TRUE);
    bit1 : counter_cell(bit0.carry_out);
    bit2 : counter_cell(bit1.carry_out);
LTLSPEC
    G F bit2.carry_out

MODULE counter_cell(carry_in)
VAR
    value : boolean;
ASSIGN
    init(value) := FALSE;
    next(value) := (value xor carry_in);
DEFINE
    carry_out := value & carry_in;

-- -- Using integer operation
-- MODULE main
-- VAR
--     bit0 : counter_cell(1);
--     bit1 : counter_cell(bit0.carry_out);
--     bit2 : counter_cell(bit1.carry_out);
-- LTLSPEC
--     G F (bit2.carry_out = 1)

-- MODULE counter_cell(carry_in)
-- VAR
--     value : 0..1;
-- ASSIGN
--     init(value) := 0;
--     next(value) := (value + carry_in) mod 2;
-- DEFINE
--     carry_out := (value + carry_in)  >= 2 ? 1 : 0;